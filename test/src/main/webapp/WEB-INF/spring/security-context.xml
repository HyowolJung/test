<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">
    
    <bean id="customLoginSuccess" class="com.jmh.security.CustomLoginSuccessHandler"/>
    <bean id="customUserDetailsService" class="com.jmh.security.CustomUserDetailsService"/>
    <bean id ="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
    
    <bean id="corsConfigurationSource" class="org.springframework.web.cors.UrlBasedCorsConfigurationSource">
    <property name="corsConfigurations">
        <map>
            <entry key="/**">
                <bean class="org.springframework.web.cors.CorsConfiguration">
                    <property name="allowedOrigins" value="*"/>
                    <property name="allowedMethods">
                        <list>
                            <value>GET</value>
                            <value>POST</value>
                            <value>PUT</value>
                            <value>DELETE</value>
                        </list>
                    </property>
                    <property name="allowedHeaders" value="*"/>
                    <property name="allowCredentials" value="true"/>
                </bean>
            </entry>
        </map>
    </property>
	</bean>
    <!-- 
    .authorizeRequests() : 요청에 대한 권한을 지정할 수 있다.
	.anyRequest().authenticated() : 인증이 되어야 한다는 이야기이다.
	.anonymous() : 인증되지 않은 사용자도 접근할 수 있다.
	.fullyAuthenticated() : 완전히 인증된 사용자만 접근할 수 있다.
	.hasRole() or hasAnyRole() : 특정 권한을 가지는 사용자만 접근할 수 있다.
	.hasAuthority() or hasAnyAuthority() : 특정 권한을 가지는 사용자만 접근할 수 있다.
	.hasIpAddress() : 특정 아이피 주소를 가지는 사용자만 접근할 수 있다.
	.access() : SpEL? 표현식에 의한 결과에 따라 접근할 수 있다.
	.not() : 접근 제한 기능을 해제
	.permitAll() or denyAll() : 접근을 전부 허용하거나 제한한다.
	.rememberMe() : 로그인한 사용자만 접근할 수 있다. 리멤버기능 
     -->
    <security:http auto-config="true" use-expressions="true">
    	<security:csrf disabled="true"/>
    	<security:cors configuration-source-ref="corsConfigurationSource"/>
    	<security:intercept-url pattern="/" access="permitAll()" /> <!-- permitAll() -->
		<security:intercept-url pattern="/login" access="permitAll()" /> <!-- permitAll() -->
		<security:intercept-url pattern="/hello" access="permitAll()" /> <!-- permitAll() -->
		<security:intercept-url pattern="/board/**" access="permitAll()" /> <!-- permitAll() -->
		<security:intercept-url pattern="/member/**" access="hasRole('ROLE_MEMBER')"/> <!-- hasRole('ROLE_MEMBER') -->
    	<security:intercept-url pattern="/project/**" access="hasRole('ROLE_MEMBER')"/> <!-- hasRole('ROLE_MEMBER') -->
    	
		<security:form-login login-page="/login"
		authentication-success-handler-ref="customLoginSuccess"
		username-parameter="memberId"
		password-parameter="memberPw"
		/>
		
		<security:logout logout-url="/logout" 
		logout-success-url="/login"
		delete-cookies="true"
		invalidate-session="true"
		/>
		
		<security:access-denied-handler error-page="/error"/>
		
	</security:http>
	
	<security:authentication-manager>
		<security:authentication-provider user-service-ref="customUserDetailsService">
			<security:password-encoder ref="bcryptPasswordEncoder"/>
		</security:authentication-provider>
	</security:authentication-manager>
</beans>
		<!-- <bean id="customPasswordEncorder" class="com.jmh.security.CustomNoOpPasswordEncoder"></bean> -->
	    <!-- <security:intercept-url pattern="/board/comunity/read" access="hasRole('ROLE_MEMBER')" /> -->
    	<!-- <security:intercept-url pattern="/project/**" access="hasRole('ROLE_PROJECT')"/> -->
 		<!-- <security:intercept-url pattern="/member/*" access="ROLE_MEMBER"/>-->
		<!-- <security:intercept-url pattern="/project/*" access="ROLE_PROJECT"/>  -->	
	<!-- <security:authentication-manager>
		<security:authentication-provider>
			<security:jdbc-user-service data-source-ref="dataSource"
				users-by-username-query="SELECT MEMBER_ID, MEMBER_PW, MEMBER_ENABLED FROM MEMBER WHERE MEMBER_ID=?"
				authorities-by-username-query="SELECT MEMBER_ID, MEMBER_PW, MEMBER_AUTHORITY FROM MEMBER WHERE MEMBER_ID=?"
			/>
			<security:user-service>
				<security:user name="user" password="{noop}user" authorities="ROLE_MEMBER"/>
				<security:user name="admin" password="{noop}admin" authorities="ROLE_MEMBER, ROLE_ADMIN"/>
			</security:user-service>		
		</security:authentication-provider>
	</security:authentication-manager> -->

